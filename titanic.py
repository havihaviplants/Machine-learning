# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yy81sNfJxiKhI-1X_aTc233MpgxRn8Jr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Colab 마운트도 동시에 수행하자! (이전 강의자료 참고)
# 자신의 경로에 맞게 설정하자!
df_train = pd.read_csv("/train.csv")
df_train.head(5)

df_train.info()

# Input Feature는 4개만 활용함
x_train = np.zeros([len(df_train), 4])
y_train = df_train["Survived"]
print(x_train.shape, y_train.shape)

# Sex
x_train[:, 0] = df_train["Sex"].map( {"male": 0, "female": 1} ).astype(float)
# Pclass
x_train[:, 1] = df_train["Pclass"].map( {3: 0, 2: 1, 1: 2} ).astype(float)
# Fare
x_train[:, 2] = (df_train["Fare"] - df_train["Fare"].mean()) / df_train["Fare"].std()
# Embarked
# fillna("S") : missing data에 대한 처리
x_train[:, 3] = df_train["Embarked"].fillna("S").map( {"S": 0, "Q": 1, "C": 2} ).astype(float)

w = np.random.rand(4)
b = np.random.rand()
print(w, b)

def sigmoid(x):
 return 1.0 / (1.0 + np.exp(-x))
def hypothesis(w, x, b):
 return sigmoid(x.dot(w) + b)
def cost_function(h, y):
 return -np.mean(y * np.log(h + 1e-8) + (1.0 - y) * np.log(1.0 - h + 1e-8))

epoch = 20000
alpha = 5e-3
total_loss = []
for i in range(epoch):
    h = hypothesis(w, x_train, b)
    loss = cost_function(h, y_train)

    for j in range(4):
      w[j] = w[j] - alpha * np.mean((h-y_train) * x_train[:, j])
    b = b - alpha * np.mean((h - y_train))

    total_loss.append(loss)
total_loss = np.array(total_loss)

plt.plot(10.0 * np.log(total_loss / (np.max(total_loss + 1e-5))))
plt.show()

# 자신의 경로에 맞게 설정하자!
# Test 데이터셋에 대한 File Open
df_test = pd.read_csv("/train.csv")
df_test.head(5)

df_test.info()

# Input Feature는 4개만 활용함
x_test = np.zeros([len(df_test), 4])
print(x_test.shape)

# Sex
x_test[:, 0] = df_test["Sex"].map( {"male": 0, "female": 1} ).astype(float)
# Pclass
x_test[:, 1] = df_test["Pclass"].map( {3: 0, 2: 1, 1: 2} ).astype(float)
# Fare
# fillna(df_train["Fare"].mean()) : missing data에 대한 처리
x_test[:, 2] = (df_test["Fare"].fillna(df_train["Fare"].mean()) - df_train["Fare"].mean()) / df_train["Fare"].std()
# Embarked
x_test[:, 3] = df_test["Embarked"].map( {"S": 0, "Q": 1, "C": 2} ).astype(float)

y_pred = hypothesis(w, x_test, b)
y_pred = np.round(y_pred)
print(y_pred.shape)

submission = pd.DataFrame({
 "PassengerId" : df_test["PassengerId"].astype(int),
 "Survived" : y_pred.astype(int)
})
# 구글 코랩에 대한 파일 경로를 추가하자!
submission.to_csv("result.csv", index=False)